#!/usr/bin/env bash

set -eo pipefail

# Input variables are automatically loaded from a .env file:
USER=""
PASSWORD=""
TFA_NAME=""
VPN_HOST=""
SERVER_CERT=""

function startup() {
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do
        DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

    [ -f ${DIR}/.env ] && . ${DIR}/.env
}

function fixroutes() {
    set +e
    VPNGATEWAY=$(dig +short $VPN_HOST)
    exit_err="$?"
    set -e
    if [[ "$exit_err" != "0" ]]; then
        # Force gateway rules error with invalid IP.
        VPNGATEWAY="999.999.999.999"
    fi
    for f in /etc/vpnc/post-disconnect.d/*; do 
        set +e
        . $f
        set -e
    done
}

function stop() {
    pid=$(pgrep 'openconnect' || true)
    if [[ -z "$pid" ]]; then
        fixroutes
        echo 'openconnect pid not found'
        return
    fi
    sudo kill "$pid"
    while [[ "$(pgrep 'openconnect' || true)" != "" ]]; do
        echo "waiting openconnect to die..."
        sleep 1
    done
    vpncpid=$(pgrep -f 'vpnc-script' || true)
    if [[ ! -z "$vpncpid" ]]; then
        while [[ "$(pgrep -f 'vpnc-script' || true)" != "" ]]; do
            echo "waiting vpnc-script to die..."
            sleep 1
        done
    fi
    fixroutes
    echo 'done'
}

function start() {
    local __resultvar=$1

    pid=$(pgrep 'openconnect' || true)
    if [[ -n "$pid" ]]; then
        echo 'openconnect already running'
        exit 1
    fi

    local server_cert_arg=""
    if [[ $SERVER_CERT != "" ]]; then
        server_cert_arg=--servercert=${SERVER_CERT}
    fi

    full_password="${PASSWORD}"
    if [[ $TFA_NAME != "" ]]; then
        full_password="${full_password}$(2fa ${TFA_NAME})"
    fi

    set +e
    sudo openconnect -v ${server_cert_arg} --dump-http-traffic --usergroup gateway --non-inter --protocol=gp $VPN_HOST -u $USER --passwd-on-stdin <<<${full_password}
    exit_status=$?
    set -e
    if [[ "$__resultvar" != "" ]]; then
        eval $__resultvar="'$exit_status'"
    fi
}

function start_background() {
    failure_count=0
    while true; do
        t0=${SECONDS}
        echo "$(date) [vpnmac] Stopping existing processes..."
        stop
        sleep 2
        echo "$(date) [vpnmac] Starting openconnect..."
        start openconnect_status
        if [[ "${openconnect_status}" == "0" ]]; then
            echo "$(date) [vpnmac] openconnect exited with 0 - stopping loop"
            break
        fi
        ellapsed=$((${SECONDS}-${t0}))
        echo "$(date) [vpnmac] openconnect exited with ${openconnect_status} after ${ellapsed}s"
        if [[ $ellapsed -gt 60 ]]; then
            failure_count=0
        fi
        failure_count=$((${failure_count}+1))

        if [[ ${failure_count} > 3 ]]; then
            echo "$(date) [vpnmac] ${failure_count} failures reached - stopping loop"
            break
        fi
    done
}

function install() {
    sudo mkdir -p /etc/vpnc/post-disconnect.d /etc/vpnc/post-connect.d
    sudo rm -f /etc/vpnc/post-disconnect.d/vpnmac-* /etc/vpnc/post-connect.d/vpnmac-*
    sudo cp ${DIR}/post-connect.d/* /etc/vpnc/post-connect.d/
    sudo cp ${DIR}/post-disconnect.d/* /etc/vpnc/post-disconnect.d/
}

startup

if [[ "$1" == "stop" ]]; then
    stop
    exit 0
elif [[ "$1" == "start" ]]; then
    start
    exit 0
elif [[ "$1" == "install" ]]; then
    install
    exit 0
elif [[ "$1" == "log" ]]; then
    cat ${HOME}/.vpnmac.log
    exit 0
fi

stop
start_background >${HOME}/.vpnmac.log 2>&1 &
